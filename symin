#   Copyright 2022 Masoud Gholami
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

#!/bin/bash


# variables to be configured at setup

#symin_package_path=/home/username/.apps/packages
#symin_install_path=/home/username/.apps/installs
#symin_export_root=/home/username/.apps/root

# init default variables

cores=$symin_cores
operation="install" 		# the default operation is to install the package
config_params=""		# no configure parameters by default other than "--prefix" that is used for package management.
list_before="0"
list_after="0"

# define functions

usage() {                             	# Function: Print a help message.
    echo "Usage: $0" 1>&2 
    echo "          [ --install ]                               # installs the specified package (default behavior)" 1>&2
    echo "          [ --uninstall ]                             # uninstalls the specified package" 1>&2
    echo "          [ --hide ]                                  # hides the specified package as if it is not installed" 1>&2
    echo "          [ --unhide ]                                # undo hides the specified package" 1>&2
    echo "          [ --url=<download url> ]                    # package download URL" 1>&2
    echo "          [ --file=<tar archive> ]                    # package archive file name" 1>&2
    echo "          [ --cores=<number of cores> ]               # number of cores to use for build" 1>&2
    echo "          [ --config-params=<configure parameters> ]  # parameters to be passed to ./configure" 1>&2
    echo "          [ --name=<package name> ]                   # the name of the package (or a part of its name)" 1>&2
    echo "          [ --executable=<program executable> ]       # an executable to specify a program for uninstall or hide" 1>&2
    echo "          [ --help | -h ]                             # prints this help message" 1>&2
}

exit_abnormal() {                     	# Function: Exit with error.
    dirs -c
    echo "Error:" 1>&2
    echo $1 1>&2
    usage
    exit 1
}

get_filename() {                # Function: get the already downloaded filename using the provided --name by the user

    candidates_number=`find $symin_package_path -maxdepth 1 -iname "*$name*" | wc -l`
    chosen_number=-1

    if [[ $candidates_number -gt 1 ]]; then

        echo "Following downloaded packages are found:"
        find $symin_package_path -maxdepth 1 -iname "*$name*" -execdir basename '{}' ';' | nl
        read -p "Enter the number of the package: " chosen_number

    elif [[ $candidates_number -eq 1 ]]; then

        echo "Following downloaded package is found:"
        find $symin_package_path -maxdepth 1 -iname "*$name*" -execdir bash -c "printf '\t'; basename '{}'" ';'
        read -p "Did you mean this package? (Y|n): " y_n
        if [[ $y_n == "Y" || $y_n == "y" ]]; then
            chosen_number=1
        else
            echo "Operation aborted!"
            exit 0
        fi

    else
        exit_abnormal "Could not find any packages regarding the input name!"
    fi

    if [[ $chosen_number -lt 1 || $chosen_number -gt $candidates_number ]]; then
        exit_abnormal "Invalid choice!"
    fi

    file=`find $symin_package_path -maxdepth 1 -iname "*$name*" -execdir basename '{}' ';' | sed -n "$chosen_number p"`

    if [[ -z $file ]]; then
        exit_abnormal "Could not find the file!"
    fi

}

get_qualified_name() {			# Function: get the qualified name, either by following the executable symlink, or by prompting the user
    

    if [[ ! -z $executable ]]; then     # get the qualified name by following the program executable symlink (for uninstall and hide)

        symlink_name=`readlink $(which $executable)`
        install_len=${#symin_install_path}
        path_base=${symlink_name:0:$install_len}
        if [[ $path_base != $symin_install_path ]]; then
            exit_abnormal "The install directory $path_base is not the same directory of the symin installation path $symin_install_path."
        fi
        path_rest=${symlink_name:$install_len+1}
        qualified_name=`echo $path_rest | cut -f1 -d'/'`

    else                                # get the qualified name from the user (for uninstall, hide, and unhide)

        candidates_number=`find $symin_install_path -maxdepth 1 -iname "*$name*" | wc -l`
        chosen_number=-1

        if [[ $candidates_number -gt 1 ]]; then

            echo "Following installations are found:"
            find $symin_install_path -maxdepth 1 -iname "*$name*" -execdir basename '{}' ';' | nl
            read -p "Enter the number of the package: " chosen_number

        elif [[ $candidates_number -eq 1 ]]; then

            echo "Following installation is found:"
            find $symin_install_path -maxdepth 1 -iname "*$name*" -execdir bash -c "printf '\t'; basename '{}'" ';'
            read -p "Did you mean this package? (Y|n): " y_n
            if [[ $y_n == "Y" || $y_n == "y" ]]; then
                chosen_number=1
            else
                echo "Operation aborted!"
                exit 0
            fi

        else
            exit_abnormal "Could not find any packages regarding the input name!"
        fi

        if [[ $chosen_number -lt 1 || $chosen_number -gt $candidates_number ]]; then
            exit_abnormal "Invalid choice!"
        fi

        qualified_name=`find $symin_install_path -maxdepth 1 -iname "*$name*" -execdir basename '{}' ';' | sed -n "$chosen_number p"`

    fi
	
    if [[ -z $qualified_name ]]; then
        exit_abnormal "Could not specify the qualified name!"
    fi
}

# get terminal inputs

while [ $# -gt 0 ]; do
    case "$1" in
    --install)
        operation="install"
        ;;
    --uninstall)
        operation="uninstall"
        ;;
    --hide)
        operation="hide"
        ;;
    --unhide)
        operation="unhide"
        ;;
    --list)
        operation="list"
        ;;
    --before)
        list_before="4"
	operation="list"
        ;;
    --after)
        list_after="4"
	operation="list"
        ;;
    --before=*)
        list_before="${1#*=}"
	operation="list"
        ;;
    --after=*)
        list_after="${1#*=}"
	operation="list"
        ;;
    --url=*)
        url="${1#*=}"
        ;;
    --file=*)
        file="${1#*=}"
        ;;
    --cores=*)
        cores="${1#*=}"
        ;;
    --config-params=*|--config-params=*)
        config_params="${1#*=}"
        ;;
    --name=*)
        name="${1#*=}"
        ;;
    --executable=*)
        executable="${1#*=}"
        ;;
    --help|-h)
        usage
        exit 0
        ;;
    *)
        exit_abnormal "Wrong usage!";
    esac
    shift
done

# check the package management paths to exist and be valid

if [[ $symin_package_path != /* || $symin_install_path != /* || $symin_export_root != /* ]]; then
    exit_abnormal "Please provide the absolute paths."    
fi
if [[ ! -d $symin_package_path || ! -d $symin_export_root || ! -d $symin_install_path ]]; then
    exit_abnormal "Please run setup.sh first to create the necessary directories."
fi

# perform one of the operations "install", "uninstall", "hide", "unhide" as specified by the user

if [[ $operation == "install" ]]; then

    pushd $symin_package_path

    # infer the filename from the url
    if [[ -z $file && ! -z $url ]]; then
        #file=`echo $url | rev | cut -d '/' -f1 | rev`
        file=`basename $url`
    elif [[ ! -z $name && -z $url ]]; then
        get_filename        
    elif [[ -z $file && -z $url ]]; then
        exit_abnormal "Please provide a filename or a URL to fetch the source code!"
    fi

    if [[ ! -z "$url" && ! -f $file ]]; then
        wget $url
    fi

    if [[ ! -f $file ]]; then
        exit_abnormal "Could not find file $file under $symin_package_path"
    fi

    foldername=`tar -tf $file | head -1 | cut -f1 -d'/'`

    tar -xf $file
    
    if [[ ! -d $foldername ]]; then
        exit_abnormal "Could not find directory $foldername under $symin_package_path"
    fi

    pushd $foldername

    if [[ ! -f configure && -f autogen.sh ]]; then
        ./autogen.sh
        status=$?
        if test ! $status -eq 0; then
            exit_abnormal "Unsuccessful autogen.sh!"
        fi
    fi

    configured="false"
    if [[ ! -f configure && ! -f Makefile ]]; then
        exit_abnormal "Makefile and configure not found!"
    elif [[ -f configure ]]; then
        ./configure --prefix=$symin_export_root/usr $config_params
        status=$?
        if test ! $status -eq 0; then
            exit_abnormal "Unsuccessful configure!"
        fi
        configured="true"
    fi


    make -j$cores
    status=$?
    if test ! $status -eq 0; then
        exit_abnormal "Unsuccessful make!"
    fi

    mkdir $symin_install_path/$foldername
    make DESTDIR=$symin_install_path/$foldername install
    status=$?
    if test ! $status -eq 0; then
        exit_abnormal "Unsuccessful make install!"
    fi

    
    if [[ $configured == "true" ]]; then
        cp -srv $symin_install_path/"$foldername"$symin_export_root/usr $symin_export_root
    else
        cp -srv $symin_install_path/"$foldername"/* $symin_export_root/
    fi

    popd
    rm -rf $foldername
    popd

    echo "Package $foldername is symlink-installed under: $symin_export_root"
    echo "The regular installation files can be found under: $symin_install_path/$foldername"

elif [[ $operation == "uninstall" ]]; then

    get_qualified_name
    find $symin_export_root -lname "$symin_install_path/$qualified_name*" -delete
    rm -rf $symin_install_path/$qualified_name
    echo "Package $qualified_name has been removed!"

elif [[ $operation == "hide" ]]; then

    get_qualified_name
    echo "clearing "$symin_export_root " from symlinks to "$symin_install_path/$qualified_name
    find $symin_export_root -lname "$symin_install_path/$qualified_name*" -delete
    echo "The package \"$qualified_name\" has been hidden!"

elif [[ $operation == "unhide" ]]; then

    get_qualified_name
    if [[ -d $symin_install_path/"$qualified_name"$symin_export_root/usr ]]; then   # configured install was performed
        cp -srv $symin_install_path/"$qualified_name"$symin_export_root/usr $symin_export_root 
    elif [[ -d $symin_install_path/"$qualified_name" ]]; then
        cp -srv $symin_install_path/"$qualified_name"/* $symin_export_root/ 
    else
        exit_abnormal "Could not find the package to unhide!"
    fi

elif [[ $operation == "list" ]]; then 
    if  [[ ! -z $name ]]; then
    	get_qualified_name
	if [[ $list_before == "0" && $list_after == "0" ]]; then
		echo "Installed package:"
	else
    		echo "Following packages are installed before/after installing "$qualified_name":"
	fi
	echo ""
	ls -lt $symin_install_path | grep "$qualified_name" -B "$list_before" -A "$list_after" | awk '{print "\t",$6,$7,$8,$9;}'
    else
    	echo "Installed packages:"
    	ls -lt $symin_install_path | awk '{print "\t",$6,$7,$8,$9;}'
    fi
    echo ""

fi


